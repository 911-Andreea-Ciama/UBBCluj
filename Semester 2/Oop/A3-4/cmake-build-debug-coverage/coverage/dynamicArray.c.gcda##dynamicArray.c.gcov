        -:    0:Source:C:/Scoala/First/Oop/A3-4/A3-4/A3-4/Refrigerator/dynamicArray.c
        -:    0:Graph:C:\Scoala\First\Oop\A3-4\cmake-build-debug-coverage\CMakeFiles\A3_4.dir\A3-4\A3-4\Refrigerator\dynamicArray.c.gcno
        -:    0:Data:C:\Scoala\First\Oop\A3-4\cmake-build-debug-coverage\CMakeFiles\A3_4.dir\A3-4\A3-4\Refrigerator\dynamicArray.c.gcda
        -:    0:Runs:1
        -:    1:#include "dynamicArray.h"
        -:    2:#include "domain.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <assert.h>
        -:    5:
function createVector called 6 returned 100% blocks executed 67%
        6:    6:Vector* createVector(int capacity)
        -:    7:{
        6:    8:    Vector* v = (Vector*)malloc(sizeof(Vector));
        -:    9:
        6:   10:    if (v == NULL)
        6:   10-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:   11:        return NULL;
    %%%%%:   11-block  0
        -:   12:
        6:   13:    v->capacity = capacity;
        6:   14:    v->size = 0;
        6:   15:    v->data = (TElem**)malloc(v->capacity * sizeof(TElem*));
        -:   16:
        6:   17:    if (v->data == NULL)
        6:   17-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:   18:    {
    #####:   19:        free(v);
    #####:   20:        return NULL;
    %%%%%:   20-block  0
        -:   21:    }
        -:   22:
        6:   23:    return v;
        6:   23-block  0
        -:   24:}
        -:   25:
function destroyVector called 6 returned 100% blocks executed 82%
        6:   26:void destroyVector(Vector* v)
        -:   27:{
        6:   28:    if (v == NULL)
        6:   28-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:   29:        return;
    %%%%%:   29-block  0
        -:   30:
        6:   31:    if (v->data == NULL)
        6:   31-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:   32:    {
    #####:   33:        free(v);
    #####:   34:        return;
    %%%%%:   34-block  0
        -:   35:    }
        -:   36:
        -:   37:    int i;
       22:   38:    for (i = 0; i < v->size; i++)
        6:   38-block  0
       16:   38-block  1
       22:   38-block  2
branch  0 taken 16
branch  1 taken 6 (fallthrough)
        -:   39:    {
       16:   40:        if (v->data[i] != NULL)
       16:   40-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 0
       16:   41:            destroyProduct(v->data[i]);
       16:   41-block  0
call    0 returned 16
        -:   42:    }
        -:   43:
        6:   44:    free(v->data);
        6:   45:    free(v);
        6:   45-block  0
        -:   46:}
        -:   47:
function resize called 4 returned 100% blocks executed 67%
        4:   48:void resize(Vector* v)
        -:   49:{
        4:   50:    if (v == NULL)
        4:   50-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   51:        return;
    %%%%%:   51-block  0
        -:   52:
        4:   53:    v->capacity *= 2;
        -:   54:
        4:   55:    TElem** aux = (TElem**)realloc(v->data, v->capacity * sizeof(TElem*));
        4:   56:    if (aux == NULL)
        4:   56-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   57:        return;
    %%%%%:   57-block  0
        -:   58:
        4:   59:    v->data = aux;
        4:   59-block  0
        -:   60:}
        -:   61:
function addToVector called 16 returned 100% blocks executed 86%
       16:   62:void addToVector(Vector* v, TElem* el)
        -:   63:{
       16:   64:    if (v == NULL || el == NULL)
       16:   64-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 0
       16:   64-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 16
    #####:   65:        return;
    %%%%%:   65-block  0
        -:   66:
       16:   67:    if (v->size == v->capacity)
       16:   67-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 12
        4:   68:        resize(v);
        4:   68-block  0
call    0 returned 4
        -:   69:
       16:   70:    v->data[v->size] = el;
       16:   71:    v->size++;
       16:   71-block  0
        -:   72:}
        -:   73:
function removeFromVector called 0 returned 0% blocks executed 0%
    #####:   74:void removeFromVector(Vector* v, int pos)
        -:   75:{
    #####:   76:    if (v == NULL || pos < 0 || pos >= v->size)
    %%%%%:   76-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   76-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   76-block  2
branch  4 never executed
branch  5 never executed
    #####:   77:        return;
    %%%%%:   77-block  0
        -:   78:
        -:   79:    int i;
    #####:   80:    for (i = pos; i < v->size - 1; i++)
    %%%%%:   80-block  0
    %%%%%:   80-block  1
branch  0 never executed
branch  1 never executed
        -:   81:    {
    #####:   82:        v->data[i] = v->data[i + 1];
    %%%%%:   82-block  0
        -:   83:    }
    #####:   84:    v->data[v->size - 1] = NULL;
    #####:   85:    v->size--;
    %%%%%:   85-block  0
        -:   86:}
        -:   87:
function get called 3 returned 100% blocks executed 80%
        3:   88:TElem* get(Vector* v, int pos)
        -:   89:{
        3:   90:    if (v == NULL || pos < 0)
        3:   90-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   90-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####:   91:        return NULL;
    %%%%%:   91-block  0
        3:   92:    return v->data[pos];
        3:   92-block  0
        -:   93:}
        -:   94:
function makeCopy called 0 returned 0% blocks executed 0%
    #####:   95:Vector* makeCopy(Vector* v)
        -:   96:{
    #####:   97:    Vector* newVector = createVector(v->capacity);
    %%%%%:   97-block  0
call    0 never executed
    #####:   98:    if (newVector == NULL)
branch  0 never executed
branch  1 never executed
    #####:   99:        return NULL;
    %%%%%:   99-block  0
        -:  100:
        -:  101:    int i;
    #####:  102:    for (i = 0; i < v->size; i++)
    %%%%%:  102-block  0
    %%%%%:  102-block  1
branch  0 never executed
branch  1 never executed
        -:  103:    {
    #####:  104:        Product* p = createProduct(v->data[i]->name, v->data[i]->category, v->data[i]->quantity, v->data[i]->date);
    %%%%%:  104-block  0
call    0 never executed
    #####:  105:        if (p == NULL)
branch  0 never executed
branch  1 never executed
        -:  106:        {
    #####:  107:            destroyVector(newVector);
    %%%%%:  107-block  0
call    0 never executed
    #####:  108:            return NULL;
        -:  109:        }
        -:  110:
    #####:  111:        addToVector(newVector, p);
    %%%%%:  111-block  0
call    0 never executed
        -:  112:    }
        -:  113:
    #####:  114:    return newVector;
    %%%%%:  114-block  0
        -:  115:}
        -:  116:
        -:  117:
        -:  118:// TESTS
function testAddToVector called 1 returned 100% blocks executed 69%
        1:  119:void testAddToVector()
        -:  120:{
        1:  121:    Vector* v = createVector(10);
        1:  121-block  0
call    0 returned 1
        -:  122:
       1*:  123:    assert(v->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  123-block  0
call    2 never executed
        1:  123-block  1
        -:  124:
        1:  125:    Product* p = createProduct("house", "100", 10, 10);
        1:  125-block  0
call    0 returned 1
        1:  126:    addToVector(v, p);
call    0 returned 1
        -:  127:
       1*:  128:    assert(v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  128-block  0
call    2 never executed
        1:  128-block  1
        -:  129:
        1:  130:    destroyVector(v);
        1:  130-block  0
call    0 returned 1
        1:  131:}
        -:  132:
function testRemoveFromVector called 0 returned 0% blocks executed 0%
    #####:  133:void testRemoveFromVector()
        -:  134:{
    #####:  135:    Vector* v = createVector(10);
    %%%%%:  135-block  0
call    0 never executed
        -:  136:
    #####:  137:    assert(v->size == 0);
branch  0 never executed
branch  1 never executed
    %%%%%:  137-block  0
call    2 never executed
    %%%%%:  137-block  1
        -:  138:
    #####:  139:    Product* p = createProduct("house", "100", 10, 10);
    %%%%%:  139-block  0
call    0 never executed
    #####:  140:    addToVector(v, p);
call    0 never executed
        -:  141:
    #####:  142:    assert(v->size == 1);
branch  0 never executed
branch  1 never executed
    %%%%%:  142-block  0
call    2 never executed
    %%%%%:  142-block  1
        -:  143:
    #####:  144:    removeFromVector(v, 0);
    %%%%%:  144-block  0
call    0 never executed
        -:  145:
    #####:  146:    assert(v->size == 0);
branch  0 never executed
branch  1 never executed
    %%%%%:  146-block  0
call    2 never executed
    %%%%%:  146-block  1
        -:  147:
    #####:  148:    destroyVector(v);
    %%%%%:  148-block  0
call    0 never executed
    #####:  149:}
        -:  150:
function testGetFromVector called 1 returned 100% blocks executed 71%
        1:  151:void testGetFromVector()
        -:  152:{
        1:  153:    Vector* v = createVector(10);
        1:  153-block  0
call    0 returned 1
        -:  154:
       1*:  155:    assert(v->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  155-block  0
call    2 never executed
        1:  155-block  1
        -:  156:
        1:  157:    Product* p = createProduct("house", "100", 10, 10);
        1:  157-block  0
call    0 returned 1
        1:  158:    addToVector(v, p);
call    0 returned 1
        -:  159:
       1*:  160:    assert(get(v, 0) == p);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  160-block  0
call    3 never executed
        1:  160-block  1
        -:  161:
        -:  162:
        1:  163:    destroyVector(v);
        1:  163-block  0
call    0 returned 1
        1:  164:}
        -:  165:
function testMakeCopy called 0 returned 0% blocks executed 0%
    #####:  166:void testMakeCopy()
        -:  167:{
    #####:  168:    Vector* v = createVector(10);
    %%%%%:  168-block  0
call    0 never executed
        -:  169:
    #####:  170:    assert(v->size == 0);
branch  0 never executed
branch  1 never executed
    %%%%%:  170-block  0
call    2 never executed
    %%%%%:  170-block  1
        -:  171:
    #####:  172:    Product* p = createProduct("house", "100", 10, 10);
    %%%%%:  172-block  0
call    0 never executed
    #####:  173:    addToVector(v, p);
call    0 never executed
        -:  174:
    #####:  175:    assert(v->size == 1);
branch  0 never executed
branch  1 never executed
    %%%%%:  175-block  0
call    2 never executed
    %%%%%:  175-block  1
        -:  176:
    #####:  177:    Vector* vCopy = makeCopy(v);
    %%%%%:  177-block  0
call    0 never executed
    #####:  178:    assert(vCopy->size == 1);
branch  0 never executed
branch  1 never executed
    %%%%%:  178-block  0
call    2 never executed
    %%%%%:  178-block  1
        -:  179:
    #####:  180:    removeFromVector(v, 0);
    %%%%%:  180-block  0
call    0 never executed
        -:  181:
    #####:  182:    assert(v->size == 0);
branch  0 never executed
branch  1 never executed
    %%%%%:  182-block  0
call    2 never executed
    %%%%%:  182-block  1
    #####:  183:    assert(vCopy->size == 1);
    %%%%%:  183-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  183-block  1
call    2 never executed
    %%%%%:  183-block  2
        -:  184:
    #####:  185:    destroyVector(v);
    %%%%%:  185-block  0
call    0 never executed
    #####:  186:    destroyVector(vCopy);
call    0 never executed
    #####:  187:}
        -:  188:
function testVector called 1 returned 100% blocks executed 100%
        1:  189:void testVector()
        -:  190:{
        1:  191:    testAddToVector();
        1:  191-block  0
call    0 returned 1
        -:  192:    //testRemoveFromVector();
        1:  193:    testGetFromVector();
call    0 returned 1
        -:  194:    //testMakeCopy();
        1:  195:}
