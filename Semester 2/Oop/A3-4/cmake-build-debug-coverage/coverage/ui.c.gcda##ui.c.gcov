        -:    0:Source:C:/Scoala/First/Oop/A3-4/A3-4/A3-4/Refrigerator/ui.c
        -:    0:Graph:C:\Scoala\First\Oop\A3-4\cmake-build-debug-coverage\CMakeFiles\A3_4.dir\A3-4\A3-4\Refrigerator\ui.c.gcno
        -:    0:Data:C:\Scoala\First\Oop\A3-4\cmake-build-debug-coverage\CMakeFiles\A3_4.dir\A3-4\A3-4\Refrigerator\ui.c.gcda
        -:    0:Runs:1
        -:    1:#include "ui.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:#include "undoRedo.h"
        -:    6:
function createUI called 1 returned 100% blocks executed 75%
        1:    7:UI* createUI(Service* s)
        -:    8:{
        1:    9:    UI* ui = malloc(sizeof(UI));
        1:   10:    if (ui == NULL)
        1:   10-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   11:        return NULL;
    %%%%%:   11-block  0
        1:   12:    ui->s = s;
        -:   13:
        1:   14:    return ui;
        1:   14-block  0
        -:   15:
        -:   16:}
        -:   17:
function destroyUI called 1 returned 100% blocks executed 80%
        1:   18:void destroyUI(UI* ui)
        -:   19:{
        1:   20:    if (ui == NULL)
        1:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   21:        return;
    %%%%%:   21-block  0
        1:   22:    destroyService(ui->s);
        1:   22-block  0
call    0 returned 1
        1:   23:    free(ui);
        -:   24:
        -:   25:}
        -:   26:
function print_menu called 1 returned 100% blocks executed 100%
        1:   27:void print_menu()
        -:   28:{
        1:   29:    printf("\t\tThe menu of commands is:\n");
        1:   29-block  0
call    0 returned 1
        1:   30:    printf("\tIf you want to add a product: 1\n");
call    0 returned 1
        1:   31:    printf("\tIf you want to remove a product: 2\n");
call    0 returned 1
        1:   32:    printf("\tIf you want to update a product: 3\n");
call    0 returned 1
        1:   33:    printf("\tIf you want to print the products that contain a certain string: 4\n");
call    0 returned 1
        1:   34:    printf("\tIf you want third functionality: 5\n");
call    0 returned 1
        1:   35:    printf("\tIf you want to undo: 6\n");
call    0 returned 1
        1:   36:    printf("\tIf you want to redo: 7\n");
call    0 returned 1
        1:   37:    printf("\tIf you want to use the bonus filter: 8\n");
call    0 returned 1
        1:   38:    printf("\tIf you want to exit the program: 0\n");
call    0 returned 1
        -:   39:
        1:   40:}
        -:   41:
function validCommand called 1 returned 100% blocks executed 80%
        1:   42:int validCommand(int command)
        -:   43:{
        1:   44:    if (command >= 0 && command <= 9)
        1:   44-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   44-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   45:        return 1;
        1:   45-block  0
    #####:   46:    return 0;
    %%%%%:   46-block  0
        -:   47:}
        -:   48:
function readIntegerNumber called 1 returned 100% blocks executed 89%
        1:   49:int readIntegerNumber(const char* message)
        -:   50:{
        1:   51:    char s[16] = { 0 };
        1:   52:    int res = 0;
        1:   53:    int flag = 0;
        1:   54:    int r = 0;
        -:   55:
        2:   56:    while (flag == 0)
        1:   56-block  0
        2:   56-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        -:   57:    {
        1:   58:        printf(message);
        1:   58-block  0
call    0 returned 1
        1:   59:        int scanf_result = scanf("%15s", s);
call    0 returned 1
        -:   60:
        1:   61:        r = sscanf(s, "%d", &res);	// reads data from s and stores them as integer, if possible; returns 1 if successful
call    0 returned 1
        1:   62:        flag = (r == 1);
        1:   63:        if (flag == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   64:            printf("Error reading number!\n");
    %%%%%:   64-block  0
call    0 never executed
        -:   65:    }
        1:   66:    return res;
        1:   66-block  0
        -:   67:}
        -:   68:
function addUI called 0 returned 0% blocks executed 0%
    #####:   69:int addUI(UI* ui, UndoRedo* ur)
        -:   70:{
        -:   71:    char name[50], category[10];
    #####:   72:    int quantity = 0, date = 0, scanfResult, res;
        -:   73:
    #####:   74:    fgetc(stdin); //clear the buffer
    %%%%%:   74-block  0
call    0 never executed
call    1 never executed
        -:   75:
    #####:   76:    printf("Name: ");
call    0 never executed
    #####:   77:    fgets(name, 49, stdin);
call    0 never executed
call    1 never executed
    #####:   78:    name[strlen(name) - 1] = '\0';
        -:   79:
    #####:   80:    printf("Category: ");
call    0 never executed
    #####:   81:    fgets(category, 9, stdin);
call    0 never executed
call    1 never executed
    #####:   82:    category[strlen(category) - 1] = '\0';
        -:   83:
    #####:   84:    printf("Quantity: ");
call    0 never executed
    #####:   85:    scanfResult = scanf("%d", &quantity);
call    0 never executed
        -:   86:
    #####:   87:    printf("Date: ");
call    0 never executed
    #####:   88:    scanfResult = scanf("%d", &date);
call    0 never executed
        -:   89:
    #####:   90:    Vector* copy = makeCopy(ui->s->repo->vector);
call    0 never executed
    #####:   91:    res = addService(ui->s, name, category, quantity, date);
call    0 never executed
        -:   92:
    #####:   93:    if (res == 1)
branch  0 never executed
branch  1 never executed
        -:   94:    {
    #####:   95:        addStateToUndo(ur, copy);
    %%%%%:   95-block  0
call    0 never executed
    #####:   96:        clearRedoList(ur);
call    0 never executed
        -:   97:    }
        -:   98:    else
        -:   99:    {
    #####:  100:        destroyVector(copy);
    %%%%%:  100-block  0
call    0 never executed
        -:  101:    }
    #####:  102:    return res;
    %%%%%:  102-block  0
        -:  103:}
        -:  104:
function removeUI called 0 returned 0% blocks executed 0%
    #####:  105:int removeUI(UI* ui, UndoRedo* ur)
        -:  106:{
        -:  107:    char name[50], category[10];
        -:  108:    int res;
        -:  109:
    #####:  110:    fgetc(stdin);
    %%%%%:  110-block  0
call    0 never executed
call    1 never executed
        -:  111:
    #####:  112:    printf("Name: ");
call    0 never executed
    #####:  113:    fgets(name, 49, stdin);
call    0 never executed
call    1 never executed
    #####:  114:    name[strlen(name) - 1] = '\0';
        -:  115:
    #####:  116:    printf("Category: ");
call    0 never executed
    #####:  117:    fgets(category, 9, stdin);
call    0 never executed
call    1 never executed
    #####:  118:    category[strlen(category) - 1] = '\0';
        -:  119:
    #####:  120:    Vector* copy = makeCopy(ui->s->repo->vector);
call    0 never executed
    #####:  121:    res = removeService(ui->s, name, category);
call    0 never executed
    #####:  122:    if (res == 1)
branch  0 never executed
branch  1 never executed
        -:  123:    {
    #####:  124:        addStateToUndo(ur, copy);
    %%%%%:  124-block  0
call    0 never executed
    #####:  125:        clearRedoList(ur);
call    0 never executed
        -:  126:    }
        -:  127:    else
        -:  128:    {
    #####:  129:        destroyVector(copy);
    %%%%%:  129-block  0
call    0 never executed
        -:  130:    }
    #####:  131:    return res;
    %%%%%:  131-block  0
        -:  132:}
        -:  133:
function updateUI called 0 returned 0% blocks executed 0%
    #####:  134:int updateUI(UI* ui, UndoRedo* ur)
        -:  135:{
        -:  136:    char name[50], category[10];
        -:  137:    int newQuantity, newDate, scanfResult, res;
        -:  138:
    #####:  139:    fgetc(stdin); //clear the buffer
    %%%%%:  139-block  0
call    0 never executed
call    1 never executed
        -:  140:
    #####:  141:    printf("Name: ");
call    0 never executed
    #####:  142:    fgets(name, 49, stdin);
call    0 never executed
call    1 never executed
    #####:  143:    name[strlen(name) - 1] = '\0';
        -:  144:
    #####:  145:    printf("Category: ");
call    0 never executed
    #####:  146:    fgets(category, 9, stdin);
call    0 never executed
call    1 never executed
    #####:  147:    category[strlen(category) - 1] = '\0';
        -:  148:
    #####:  149:    printf("Quantity: ");
call    0 never executed
    #####:  150:    scanfResult = scanf("%d", &newQuantity);
call    0 never executed
        -:  151:
    #####:  152:    printf("Date: ");
call    0 never executed
    #####:  153:    scanfResult = scanf("%d", &newDate);
call    0 never executed
        -:  154:
    #####:  155:    Vector* copy = makeCopy(ui->s->repo->vector);
call    0 never executed
    #####:  156:    res = updateService(ui->s, name, category, newQuantity, newDate);
call    0 never executed
    #####:  157:    if (res == 1)
branch  0 never executed
branch  1 never executed
        -:  158:    {
    #####:  159:        addStateToUndo(ur, copy);
    %%%%%:  159-block  0
call    0 never executed
    #####:  160:        clearRedoList(ur);
call    0 never executed
        -:  161:    }
        -:  162:    else
        -:  163:    {
    #####:  164:        destroyVector(copy);
    %%%%%:  164-block  0
call    0 never executed
        -:  165:    }
    #####:  166:    return res;
    %%%%%:  166-block  0
        -:  167:
        -:  168:}
        -:  169:
function printVector called 0 returned 0% blocks executed 0%
    #####:  170:int printVector(Vector* result)
        -:  171:{
        -:  172:    int i;
    #####:  173:    for (i = 0; i < result->size; i++)
    %%%%%:  173-block  0
    %%%%%:  173-block  1
    %%%%%:  173-block  2
branch  0 never executed
branch  1 never executed
        -:  174:    {
        -:  175:        char representation[200];
    #####:  176:        Product* p = (Product*)malloc(sizeof(Product));
    #####:  177:        if (p == NULL)
    %%%%%:  177-block  0
branch  0 never executed
branch  1 never executed
    #####:  178:            return 0;
    %%%%%:  178-block  0
        -:  179:
    #####:  180:        p = result->data[i];
    #####:  181:        toString(p, representation);
    %%%%%:  181-block  0
call    0 never executed
    #####:  182:        if (p != NULL)
branch  0 never executed
branch  1 never executed
    #####:  183:            printf("%s\n", representation);
    %%%%%:  183-block  0
call    0 never executed
        -:  184:        else
    #####:  185:            printf("no estate found...\n");
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
        -:  187:
    #####:  188:    return 1;
    %%%%%:  188-block  0
        -:  189:}
        -:  190:
function listGivenString called 0 returned 0% blocks executed 0%
    #####:  191:int listGivenString(UI* ui)
        -:  192:{
        -:  193:    char filter[50];
        -:  194:    int filtered, printed;
    #####:  195:    printf("filter: ");
    %%%%%:  195-block  0
call    0 never executed
    #####:  196:    fgetc(stdin); // clear the buffer
call    0 never executed
call    1 never executed
    #####:  197:    fgets(filter, 49, stdin);
call    0 never executed
call    1 never executed
    #####:  198:    filter[strlen(filter) - 1] = '\0';
        -:  199:
    #####:  200:    Vector* result = createVector(getLengthRepo(ui->s->repo));
call    0 never executed
call    1 never executed
    #####:  201:    if (result == NULL)
branch  0 never executed
branch  1 never executed
    #####:  202:        return 0;
    %%%%%:  202-block  0
        -:  203:
    #####:  204:    filtered = filterForPrinting(ui->s, filter, result);
    %%%%%:  204-block  0
call    0 never executed
    #####:  205:    if (result->size == 0 || filtered == 0)
branch  0 never executed
branch  1 never executed
    %%%%%:  205-block  0
branch  2 never executed
branch  3 never executed
    #####:  206:        return 0;
    %%%%%:  206-block  0
        -:  207:
    #####:  208:    printed = printVector(result);
    %%%%%:  208-block  0
call    0 never executed
    #####:  209:    if (printed == 0)
branch  0 never executed
branch  1 never executed
    #####:  210:        return 0;
    %%%%%:  210-block  0
        -:  211:
    #####:  212:    destroyVector(result);
    %%%%%:  212-block  0
call    0 never executed
        -:  213:
    #####:  214:    return 1;
        -:  215:}
        -:  216:
        -:  217:
function listSearchProductByCategory called 0 returned 0% blocks executed 0%
    #####:  218:int listSearchProductByCategory(UI* ui)
        -:  219:{
    #####:  220:    if (ui == NULL)
    %%%%%:  220-block  0
branch  0 never executed
branch  1 never executed
    #####:  221:        return 0;
    %%%%%:  221-block  0
        -:  222:
        -:  223:    char category[50];
        -:  224:    int expirationDate, x, scanfResult, searched, printed, sorted;
        -:  225:
        -:  226:
    #####:  227:    fgetc(stdin);
    %%%%%:  227-block  0
call    0 never executed
call    1 never executed
        -:  228:
    #####:  229:    printf("Category: ");
call    0 never executed
    #####:  230:    fgets(category, 9, stdin);
call    0 never executed
call    1 never executed
    #####:  231:    category[strlen(category) - 1] = '\0';
        -:  232:
    #####:  233:    printf("Expiration date: ");
call    0 never executed
    #####:  234:    scanfResult = scanf("%d", &expirationDate);
call    0 never executed
        -:  235:
    #####:  236:    printf("X days close to the expiration date: ");
call    0 never executed
    #####:  237:    scanfResult = scanf("%d", &x);
call    0 never executed
        -:  238:
    #####:  239:    printf("Ascending: 1, Descending: 2");
call    0 never executed
    #####:  240:    scanfResult = scanf("%d", &sorted);
call    0 never executed
        -:  241:
    #####:  242:    Vector* result = createVector(getLengthRepo(ui->s->repo));
call    0 never executed
call    1 never executed
    #####:  243:    if (result == NULL)
branch  0 never executed
branch  1 never executed
    #####:  244:        return 0;
    %%%%%:  244-block  0
        -:  245:
    #####:  246:    if (sorted == 1)
    %%%%%:  246-block  0
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:        searched = searchProductByCategoryAscending(ui->s, category, expirationDate, x, result);
    %%%%%:  248-block  0
call    0 never executed
    #####:  249:        if (result->size == 0 || searched == 0)
branch  0 never executed
branch  1 never executed
    %%%%%:  249-block  0
branch  2 never executed
branch  3 never executed
    #####:  250:            return 0;
    %%%%%:  250-block  0
        -:  251:
    #####:  252:        printed = printVector(result);
    %%%%%:  252-block  0
call    0 never executed
    #####:  253:        if (printed == 0)
branch  0 never executed
branch  1 never executed
    #####:  254:            return 0;
    %%%%%:  254-block  0
        -:  255:    }
    #####:  256:    else if (sorted == 2)
    %%%%%:  256-block  0
branch  0 never executed
branch  1 never executed
        -:  257:    {
    #####:  258:        searched = searchProductByCategoryDescending(ui->s, category, expirationDate, x, result);
    %%%%%:  258-block  0
call    0 never executed
    #####:  259:        if (result->size == 0 || searched == 0)
branch  0 never executed
branch  1 never executed
    %%%%%:  259-block  0
branch  2 never executed
branch  3 never executed
    #####:  260:            return 0;
    %%%%%:  260-block  0
        -:  261:
    #####:  262:        printed = printVector(result);
    %%%%%:  262-block  0
call    0 never executed
    #####:  263:        if (printed == 0)
branch  0 never executed
branch  1 never executed
    #####:  264:            return 0;
    %%%%%:  264-block  0
        -:  265:    }
        -:  266:    else
    #####:  267:        return 0;
    %%%%%:  267-block  0
        -:  268:
    #####:  269:    destroyVector(result);
    %%%%%:  269-block  0
call    0 never executed
        -:  270:
    #####:  271:    return 1;
        -:  272:}
        -:  273:
        -:  274:///Here is for bonus point
function listOtherFilter called 0 returned 0% blocks executed 0%
    #####:  275:int listOtherFilter(UI* ui)
        -:  276:{
        -:  277:    int filter;
        -:  278:    int filtered, printed, scanfResult;
    #####:  279:    printf("Filter: ");
    %%%%%:  279-block  0
call    0 never executed
    #####:  280:    scanfResult = scanf("%d", &filter);
call    0 never executed
        -:  281:
    #####:  282:    Vector* result = createVector(getLengthRepo(ui->s->repo));
call    0 never executed
call    1 never executed
    #####:  283:    if (result == NULL)
branch  0 never executed
branch  1 never executed
    #####:  284:        return 0;
    %%%%%:  284-block  0
        -:  285:
    #####:  286:    filtered = getFilterBonus(ui->s, filter, result);
    %%%%%:  286-block  0
call    0 never executed
    #####:  287:    if (result->size == 0 || filtered == 0)
branch  0 never executed
branch  1 never executed
    %%%%%:  287-block  0
branch  2 never executed
branch  3 never executed
    #####:  288:        return 0;
    %%%%%:  288-block  0
        -:  289:
    #####:  290:    printed = printVector(result);
    %%%%%:  290-block  0
call    0 never executed
    #####:  291:    if (printed == 0)
branch  0 never executed
branch  1 never executed
    #####:  292:        return 0;
    %%%%%:  292-block  0
        -:  293:
    #####:  294:    destroyVector(result);
    %%%%%:  294-block  0
call    0 never executed
        -:  295:
    #####:  296:    return 1;
        -:  297:}
        -:  298:
        -:  299:
function start called 1 returned 100% blocks executed 20%
        1:  300:void start(UI* ui) {
        -:  301:    int command, res;
        1:  302:    UndoRedo* ur = createUndoRedo();
        1:  302-block  0
call    0 returned 1
        -:  303:
        -:  304:    while (1)
        -:  305:    {
        1:  306:        print_menu();
        1:  306-block  0
call    0 returned 1
        1:  307:        command = readIntegerNumber("Input command: ");
call    0 returned 1
        1:  308:        while (validCommand(command) == 0) {
        1:  308-block  0
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####:  309:            printf("Please input a valid command!\n");
    %%%%%:  309-block  0
call    0 never executed
    #####:  310:            command = readIntegerNumber("Input command: ");
call    0 never executed
        -:  311:        }
        1:  312:        switch (command)
        1:  312-block  0
branch  0 taken 1
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
        -:  313:
        -:  314:        {
        1:  315:        case 0:
        -:  316:        {
        1:  317:            destroyUndoRedo(ur);
        1:  317-block  0
call    0 returned 1
        1:  318:            return;
        -:  319:        }
    #####:  320:        case 1:
        -:  321:        {
    #####:  322:            res = addUI(ui, ur);
    %%%%%:  322-block  0
call    0 never executed
    #####:  323:            if (res == 1)
branch  0 never executed
branch  1 never executed
    #####:  324:                printf("Product successfully added!!\n");
    %%%%%:  324-block  0
call    0 never executed
        -:  325:            else
    #####:  326:                printf("The product already existed in the fridge! The quantity was updated.\n");
    %%%%%:  326-block  0
call    0 never executed
    #####:  327:            break;
    %%%%%:  327-block  0
        -:  328:        }
    #####:  329:        case 2:
        -:  330:        {
    #####:  331:            res = removeUI(ui, ur);
    %%%%%:  331-block  0
call    0 never executed
    #####:  332:            if (res == 1)
branch  0 never executed
branch  1 never executed
    #####:  333:                printf("Product successfully remove!\n");
    %%%%%:  333-block  0
call    0 never executed
        -:  334:            else
    #####:  335:                printf("The product you want does not exist in out list!\n");
    %%%%%:  335-block  0
call    0 never executed
    #####:  336:            break;
    %%%%%:  336-block  0
        -:  337:        }
    #####:  338:        case 3:
        -:  339:        {
    #####:  340:            res = updateUI(ui, ur);
    %%%%%:  340-block  0
call    0 never executed
    #####:  341:            if (res == 1)
branch  0 never executed
branch  1 never executed
    #####:  342:                printf("Product successfully updated!\n");
    %%%%%:  342-block  0
call    0 never executed
        -:  343:            else
    #####:  344:                printf("The product you want does not exist in our list!\n");
    %%%%%:  344-block  0
call    0 never executed
    #####:  345:            break;
    %%%%%:  345-block  0
        -:  346:        }
    #####:  347:        case 4:
        -:  348:        {
    #####:  349:            res = listGivenString(ui);
    %%%%%:  349-block  0
call    0 never executed
    #####:  350:            if (res == 0)
branch  0 never executed
branch  1 never executed
    #####:  351:                printf("There has been an error, possible no matches!\n");
    %%%%%:  351-block  0
call    0 never executed
    #####:  352:            break;
    %%%%%:  352-block  0
        -:  353:        }
    #####:  354:        case 5:
        -:  355:        {
    #####:  356:            res = listSearchProductByCategory(ui);
    %%%%%:  356-block  0
call    0 never executed
    #####:  357:            if (res == 0)
branch  0 never executed
branch  1 never executed
    #####:  358:                printf("There has been an error, possible no matches!\n");
    %%%%%:  358-block  0
call    0 never executed
    #####:  359:            break;
    %%%%%:  359-block  0
        -:  360:        }
    #####:  361:        case 6:
        -:  362:        {
    #####:  363:            res = undo(ur, ui->s->repo);
    %%%%%:  363-block  0
call    0 never executed
    #####:  364:            if (res == 0)
branch  0 never executed
branch  1 never executed
    #####:  365:                printf("You cant undo anymore!\n");
    %%%%%:  365-block  0
call    0 never executed
        -:  366:            else
    #####:  367:                printf("Undo successful!!\n");
    %%%%%:  367-block  0
call    0 never executed
    #####:  368:            break;
    %%%%%:  368-block  0
        -:  369:        }
    #####:  370:        case 7:
        -:  371:        {
    #####:  372:            res = redo(ur, ui->s->repo);
    %%%%%:  372-block  0
call    0 never executed
    #####:  373:            if (res == 0)
branch  0 never executed
branch  1 never executed
    #####:  374:                printf("You cant redo anymore!\n");
    %%%%%:  374-block  0
call    0 never executed
        -:  375:            else
    #####:  376:                printf("Redo successful\n");
    %%%%%:  376-block  0
call    0 never executed
    #####:  377:            break;
    %%%%%:  377-block  0
        -:  378:        }
    #####:  379:        case 8:
        -:  380:        {
    #####:  381:            res = listOtherFilter(ui);
    %%%%%:  381-block  0
call    0 never executed
    #####:  382:            if (res == 0)
branch  0 never executed
branch  1 never executed
    #####:  383:                printf("There has been an error, possible no matches!\n");
    %%%%%:  383-block  0
call    0 never executed
    #####:  384:            break;
    %%%%%:  384-block  0
        -:  385:        }
        -:  386:        }
        -:  387:    }
        -:  388:}
