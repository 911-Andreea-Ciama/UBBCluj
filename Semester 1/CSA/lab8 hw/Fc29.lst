     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declaring extern functions used in the program
     7                                  extern exit, printf, scanf ; add printf and scanf as extern functions            
     8                                  import exit msvcrt.dll    
     9                                  import printf msvcrt.dll    ; tell the assembler that function printf is found in msvcrt.dll library
    10                                  import scanf msvcrt.dll     ; similar for scanf
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  
    14                                  
    15                                  segment data use32 class=data
    16 00000000 0000                        a dw 0
    17 00000002 00                          m db 0
    18 00000003 00                          n db 0
    19 00000004 00000000                    scana dd 0
    20 00000008 00000000                    scanm dd 0
    21 0000000C 00000000                    scann dd 0
    22 00000010 61203D2000                  message1 db "a = ", 0
    23 00000015 6D203D2000                  message2 db "m = ", 0
    24 0000001A 2564                        format1 db "%d"
    25 0000001C 6E203D2000                  message3 db "n = ", 0
    26 00000021 546865206E756D6265-         format db "The number is %x"
    26 0000002A 72206973202578     
    27                                  
    28                                  ; our code starts here
    29                                  ;Read three numbers a, m and n (a: word, 0 <= m, n <= 15, m > n) from the keyboard. Isolate the bits m-n of a and display the integer represented by those bits in base 16
    30                                  segment code use32 class=code
    31                                      start:
    32                                      
    33 00000000 68[10000000]                    push dword message1
    34 00000005 FF15[00000000]                  call [printf]
    35 0000000B 83C404                          add esp, 4 * 1
    36                                          
    37 0000000E 68[04000000]                    push dword scana
    38 00000013 68[1A000000]                    push dword format1
    39 00000018 FF15[00000000]                  call [scanf]
    40 0000001E 83C408                          add esp, 4 * 2
    41                                          
    42 00000021 68[15000000]                    push dword message2
    43 00000026 FF15[00000000]                  call [printf]
    44 0000002C 83C404                          add esp, 4 * 1
    45                                          
    46 0000002F 68[08000000]                    push dword scanm
    47 00000034 68[1A000000]                    push dword format1
    48 00000039 FF15[00000000]                  call [scanf]
    49 0000003F 83C408                          add esp, 4 * 2
    50                                          
    51 00000042 68[1C000000]                    push dword message3
    52 00000047 FF15[00000000]                  call [printf]
    53 0000004D 83C404                          add esp, 4 * 1
    54                                          
    55 00000050 68[0C000000]                    push dword scann
    56 00000055 68[1A000000]                    push dword format1
    57 0000005A FF15[00000000]                  call [scanf]
    58 00000060 83C408                          add esp, 4 * 2
    59                                          
    60 00000063 A1[04000000]                    mov eax, [scana]
    61 00000068 A3[00000000]                    mov [a], eax
    62                                          
    63 0000006D A1[08000000]                    mov eax, [scanm]
    64 00000072 A3[02000000]                    mov [m], eax
    65                                          
    66 00000077 A1[0C000000]                    mov eax, [scann]
    67 0000007C A3[03000000]                    mov [n], eax
    68                                          
    69 00000081 66A1[00000000]                  mov ax, [a]
    70                                          
    71 00000087 8A1D[02000000]                  mov bl, [m]
    72 0000008D B10F                            mov cl, 15
    73 0000008F 28D9                            sub cl, bl
    74 00000091 66D3E0                          shl ax, cl ; the bits from pos 0 to n-1 become 0
    75                                          
    76 00000094 B10F                            mov cl, 15
    77 00000096 8A15[03000000]                  mov dl, [n]
    78 0000009C 28D3                            sub bl, dl ; BL: m-n
    79 0000009E 28D9                            sub cl, bl ; CL: 15 - (m-n)
    80 000000A0 66D3E8                          shr ax, cl ; the bits from pos m+1 to 15 become 0
    81                                          
    82 000000A3 BA00000000                      mov edx, 0
    83 000000A8 6689C2                          mov dx, ax
    84 000000AB 52                              push edx
    85 000000AC 68[21000000]                    push dword format
    86 000000B1 FF15[00000000]                  call [printf]
    87                                          
    88                                      
    89                                          ; exit(0)
    90 000000B7 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    91 000000B9 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
