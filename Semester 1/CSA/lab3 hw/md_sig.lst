     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 14                          a db 20
    14 00000001 1E                          b db 30
    15 00000002 07                          c db 7
    16 00000003 05000000                    d dd 5
    17 00000007 0300000000000000            x dq 3
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; (a+b)/(c-2)-d+2-x
    23 00000000 BA00000000                      mov edx, 0
    24 00000005 8A15[00000000]                  mov dl, [a] ;DL<-a
    25 0000000B 0215[01000000]                  add dl,[b]  ;DL<-a+b
    26 00000011 88D0                            mov al,dl ;AL<-a+b
    27 00000013 6698                            cbw ;signed conversion from al to ax
    28                                          
    29 00000015 8A0D[02000000]                  mov cl, [c] ; cl<-c
    30 0000001B 80E902                          sub cl,2 ; cl<-c-2
    31 0000001E F6F9                            idiv cl ; al=(a+b)/(c-2)
    32 00000020 6698                            cbw ;signed conversion from al to ax
    33 00000022 98                              cwde ;signed conversion from ax to eax
    34 00000023 89C3                            mov ebx, eax ;we save (a+b)/(c-2) in ebx so that we can use eax for d	
    35                                         
    36 00000025 A1[03000000]                    mov eax,[d] ;eax <- d
    37 0000002A 29C3                            sub ebx, eax ;ebx=(a+b)/(c-2)-d	
    38 0000002C 83C302                          add ebx, 2;;ebx=(a+b)/(c-2)-d+2	
    39 0000002F 89D8                            mov eax, ebx
    40                                          
    41 00000031 99                              cdq ;edx:eax = (a+b)/(c-2)-d+2	
    42                                          
    43 00000032 2B05[07000000]                  sub eax, dword [x]
    44 00000038 1B15[0B000000]                  sbb edx, dword [x+4] ;edx:eax = (a+b)/(c-2)-d+2-x
    45 0000003E F8                              clc
    46                                          
    47                                          ; exit(0)
    48 0000003F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000041 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
