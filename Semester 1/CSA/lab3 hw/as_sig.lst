     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 14                          a db 20
    14 00000001 1E00                        b dw 30
    15 00000003 0A000000                    c dd 10
    16 00000007 6400000000000000            d dq 100
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; (a+a)-(b+b)-(c+d)+(d+d)
    22 00000000 BA00000000                      mov EDX, 0
    23 00000005 8A15[03000000]                  mov DL, [c]
    24 0000000B 8B1D[07000000]                  mov EBX, dword [d+0]
    25 00000011 A1[0B000000]                    mov EAX, dword [d+4]
    26 00000016 F8                              clc
    27 00000017 01D3                            add EBX, EDX
    28 00000019 83D000                          adc EAX,0 ;d+c 
    29 0000001C BA00000000                      mov EDX, 0
    30 00000021 8A15[00000000]                  mov DL, [a] 
    31 00000027 01D2                            add EDX, EDX
    32 00000029 B900000000                      mov ECX, 0
    33 0000002E 668B0D[01000000]                mov CX, [b]
    34 00000035 01C9                            add ECX,ECX
    35 00000037 29CA                            sub EDX,ECX
    36 00000039 F8                              clc
    37 0000003A 29DA                            sub EDX,EBX
    38 0000003C 83D800                          sbb EAX,0
    39 0000003F 8B1D[07000000]                  mov EBX, dword [d+0]
    40 00000045 A1[0B000000]                    mov EAX, dword [d+4]
    41 0000004A F8                              clc
    42 0000004B 01DB                            add EBX,EBX
    43 0000004D 11C0                            adc EAX,EAX
    44 0000004F F8                              clc
    45 00000050 01DA                            add EDX, EBX
    46 00000052 83D000                          adc EAX, 0
    47                                          
    48                                          
    49                                          
    50                                          
    51                                          
    52                                      
    53                                          ; exit(0)
    54 00000055 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000057 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
