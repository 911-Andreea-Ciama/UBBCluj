     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 57775777                    a dd 01110111010101110111011101010111b
    14 00000004 BE9BBE9B                    b dd 10011011101111101001101110111110b
    15 00000008 0000000000000000            c dq 0
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 BB00000000                      mov  ebx, 0 ; we compute the result in ebx
    21                                  
    22 00000005 A1[00000000]                    mov  eax, [a] ; we isolate bits 21-28 of A
    23 0000000A 250000E01F                      and  eax, 00011111111000000000000000000000b
    24 0000000F B103                            mov  cl, 3
    25 00000011 D3C0                            rol  eax, cl ; we rotate 3 positions to the left
    26 00000013 09C3                            or   ebx, eax ; we put the bits into the result
    27                                          
    28 00000015 A1[04000000]                    mov  eax, [b] ; we isolate bits 23-30 of B
    29 0000001A F7D0                            not  eax
    30 0000001C 250000807F                      and  eax, 01111111100000000000000000000000b
    31 00000021 B10F                            mov  cl, 15
    32 00000023 D3C0                            rol  eax, cl ; we rotate 15 positions to the right
    33 00000025 09C3                            or   ebx, eax ; we put the bits into the result
    34                                          
    35 00000027 81E3FFFFEAFF                    and  ebx, 11111111111010101111111111111111b
    36 0000002D 81CB00002A00                    or   ebx, 00000000001010100000000000000000b
    37                                          
    38 00000033 81E3FFFF3F00                    and  ebx, 00000000001111111111111111111111b
    39                                          
    40 00000039 BA00000000                      mov  edx, 0 ; we compute the result in edx
    41                                  
    42 0000003E A1[04000000]                    mov  eax, [b] ; we isolate bits 21-31 of B
    43 00000043 250000E0FF                      and  eax, 11111111111000000000000000000000b
    44 00000048 B10B                            mov  cl, 11
    45 0000004A D3C0                            rol  eax, cl ; we rotate 11 positions to the left
    46 0000004C 09C2                            or   edx, eax ; we put the bits into the result
    47                                          
    48 0000004E A1[00000000]                    mov  eax, [a] ; we isolate bits 1-13 of A
    49 00000053 25FE3F0000                      and  eax, 00000000000000000011111111111110b
    50 00000058 B10A                            mov  cl, 10
    51 0000005A D3C8                            ror  eax, cl ; we rotate 10 positions to the right
    52 0000005C 09C2                            or   edx, eax ; we put the bits into the result
    53                                          
    54 0000005E B8[00000000]                    mov  eax, a
    55 00000063 35AB000000                      xor  eax, 0ABh ; we put the result of A XOR 0Ah in eax
    56 00000068 25000000FF                      and  eax, 11111111000000000000000000000000b
    57 0000006D 09C2                            or   edx, eax ; we put the bits into the result
    58                                          
    59                                          
    60                                          
    61                                          
    62                                          
    63                                          
    64                                          
